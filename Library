local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local DayYield = {}
DayYield.Style = {
	BackgroundColor = Color3.fromRGB(30, 30, 30),
	AccentColor = Color3.fromRGB(0, 170, 255),
	TextColor = Color3.fromRGB(255, 255, 255),
	ButtonColor = Color3.fromRGB(45, 45, 45),
	TabColor = Color3.fromRGB(40, 40, 40),
	NotificationColor = Color3.fromRGB(50, 50, 50),
}
function DayYield:SetTheme(newTheme)
	for key, value in pairs(newTheme) do
		self.Style[key] = value
	end
end
local function applyUICorner(object, radius)
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, radius)
	corner.Parent = object
end
local function applyUIStroke(object, thickness, color)
	local stroke = Instance.new("UIStroke")
	stroke.Thickness = thickness
	stroke.Color = color
	stroke.Parent = object
end
local function makeDraggable(frame)
	local dragging = false
	local dragInput, dragStart, startPos
	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	frame.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(frame.Position.X.Scale, startPos.X.Offset + delta.X, frame.Position.Y.Scale, startPos.Y.Offset + delta.Y)
		end
	end)
end
function DayYield:CreateWindow(options)
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = options.Name or "DayYieldWindow"
	screenGui.Parent = PlayerGui
	screenGui.ResetOnSpawn = false
	local window = Instance.new("Frame")
	window.Size = options.Size or UDim2.new(0, 400, 0, 300)
	window.Position = options.Position or UDim2.new(0.5, -200, 0.5, -150)
	window.BackgroundColor3 = (options.Theme and options.Theme.BackgroundColor) or DayYield.Style.BackgroundColor
	window.BorderSizePixel = 0
	window.Parent = screenGui
	applyUICorner(window, 10)
	applyUIStroke(window, 2, DayYield.Style.AccentColor)
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Text = options.Title or "DayYield UI"
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextSize = 18
	titleLabel.TextColor3 = (options.Theme and options.Theme.TextColor) or DayYield.Style.TextColor
	titleLabel.Size = UDim2.new(1, 0, 0, 40)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Parent = window
	local tabHolder = Instance.new("Frame")
	tabHolder.Size = UDim2.new(1, 0, 0, 40)
	tabHolder.Position = UDim2.new(0, 0, 0, 40)
	tabHolder.BackgroundColor3 = (options.Theme and options.Theme.TabColor) or DayYield.Style.TabColor
	tabHolder.Parent = window
	applyUICorner(tabHolder, 8)
	local contentHolder = Instance.new("Frame")
	contentHolder.Size = UDim2.new(1, -20, 1, -90)
	contentHolder.Position = UDim2.new(0, 10, 0, 90)
	contentHolder.BackgroundTransparency = 1
	contentHolder.Parent = window
	makeDraggable(window)
	local winObject = {}
	winObject.ScreenGui = screenGui
	winObject.Main = window
	winObject.TabHolder = tabHolder
	winObject.ContentHolder = contentHolder
	function winObject:CreateTab(tabOptions)
		local tabButton = Instance.new("TextButton")
		tabButton.Text = tabOptions.Name or "Tab"
		tabButton.Font = Enum.Font.Gotham
		tabButton.TextSize = 14
		tabButton.TextColor3 = DayYield.Style.TextColor
		tabButton.BackgroundColor3 = DayYield.Style.TabColor
		tabButton.Size = UDim2.new(0, 100, 0, 30)
		tabButton.Parent = self.TabHolder
		applyUICorner(tabButton, 6)
		local tabContent = Instance.new("Frame")
		tabContent.Size = UDim2.new(1, 0, 1, 0)
		tabContent.BackgroundTransparency = 1
		tabContent.Parent = self.ContentHolder
		tabContent.Visible = false
		local tabObject = {}
		tabObject.Button = tabButton
		tabObject.Content = tabContent
		function tabObject:CreateButton(btnOptions)
			local button = Instance.new("TextButton")
			button.Text = btnOptions.Text or "Button"
			button.Font = Enum.Font.Gotham
			button.TextSize = 14
			button.TextColor3 = DayYield.Style.TextColor
			button.BackgroundColor3 = DayYield.Style.ButtonColor
			button.Size = btnOptions.Size or UDim2.new(0, 200, 0, 40)
			button.Position = btnOptions.Position or UDim2.new(0, 0, 0, 0)
			button.Parent = self.Content
			applyUICorner(button, 6)
			button.MouseButton1Click:Connect(btnOptions.Callback or function() end)
		end
		function tabObject:CreateToggle(togOptions)
			local toggle = Instance.new("TextButton")
			toggle.Text = togOptions.Text or "Toggle"
			toggle.Font = Enum.Font.Gotham
			toggle.TextSize = 14
			toggle.TextColor3 = DayYield.Style.TextColor
			toggle.BackgroundColor3 = DayYield.Style.ButtonColor
			toggle.Size = togOptions.Size or UDim2.new(0, 200, 0, 40)
			toggle.Position = togOptions.Position or UDim2.new(0, 0, 0, 0)
			toggle.Parent = self.Content
			applyUICorner(toggle, 6)
			local state = false
			toggle.MouseButton1Click:Connect(function()
				state = not state
				toggle.Text = togOptions.Text .. (state and ": ON" or ": OFF")
				togOptions.Callback(state)
			end)
		end
		tabButton.MouseButton1Click:Connect(function()
			for _, child in pairs(self.Parent:GetChildren()) do
				if child:IsA("Frame") then
					child.Visible = false
				end
			end
			tabContent.Visible = true
		end)
		return tabObject
	end
	function winObject:BindToggle(key)
		key = key:upper()
		UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if gameProcessed then return end
			if input.KeyCode == Enum.KeyCode[key] then
				if self.Main.Visible then
					local tween = TweenService:Create(self.Main, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
					tween:Play()
					tween.Completed:Wait()
					self.Main.Visible = false
					self:Notify({Title = "Interface", Message = "Interface is now Hidden", Duration = 2})
				else
					self.Main.Visible = true
					local tween = TweenService:Create(self.Main, TweenInfo.new(3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0})
					tween:Play()
					self:Notify({Title = "Interface", Message = "Interface is now Visible", Duration = 2})
				end
			end
		end)
	end
	function winObject:BindKey(key, callback)
		key = key:upper()
		UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if gameProcessed then return end
			if input.KeyCode == Enum.KeyCode[key] then
				callback()
			end
		end)
	end
	function winObject:Notify(notifOptions)
		local notif = Instance.new("TextLabel")
		notif.Text = (notifOptions.Title or "Notification") .. "\n" .. (notifOptions.Message or "")
		notif.Font = Enum.Font.GothamBold
		notif.TextSize = 14
		notif.TextColor3 = DayYield.Style.TextColor
		notif.BackgroundColor3 = DayYield.Style.NotificationColor
		notif.Size = notifOptions.Size or UDim2.new(0, 250, 0, 60)
		notif.Position = notifOptions.Position or UDim2.new(1, -260, 0, 100)
		notif.Parent = self.ScreenGui or PlayerGui:FindFirstChild("DayYieldWindow")
		applyUICorner(notif, 8)
		notif.BackgroundTransparency = 0
		local tween = TweenService:Create(notif, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1})
		task.spawn(function()
			task.wait(notifOptions.Duration or 3)
			tween:Play()
			tween.Completed:Wait()
			notif:Destroy()
		end)
	end
	return winObject
end
return DayYield
