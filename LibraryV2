-- Load the Day Yield Library
local DayYield = loadstring(game:HttpGet("https://raw.githubusercontent.com/alexsssszzzz/DayYield/refs/heads/main/LibraryV2"))()

-- Create a window
local Window = DayYield:CreateWindow({
    Title = "Day Yield Library [ALPHA]"
})

-- Add tabs
local GeneralTab = Window:CreateTab("General")
local ESPTab = Window:CreateTab("ESP")

-- Variables for fly, aimbot, and infinite jump
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local userInputService = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local camera = workspace.CurrentCamera

local flying = false
local aimbotEnabled = false
local infiniteJump = false

-- Improved Fly Logic
GeneralTab:CreateButton({
    Name = "Fly",
    Callback = function()
        flying = not flying
        if flying then
            DayYield:Notify("Fly", "Flying has been activated!", 3)
            humanoid:ChangeState(Enum.HumanoidStateType.Flying)
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.MaxForce = Vector3.new(0, 0, 0)
            bodyVelocity.Parent = rootPart

            local flyConnection
            flyConnection = runService.Stepped:Connect(function()
                if not flying then
                    bodyVelocity:Destroy()
                    flyConnection:Disconnect()
                    return
                end

                local direction = Vector3.new()
                if userInputService:IsKeyDown(Enum.KeyCode.W) then
                    direction = direction + camera.CFrame.LookVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.S) then
                    direction = direction - camera.CFrame.LookVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.A) then
                    direction = direction - camera.CFrame.RightVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.D) then
                    direction = direction + camera.CFrame.RightVector
                end
                if userInputService:IsKeyDown(Enum.KeyCode.Space) then
                    direction = direction + Vector3.new(0, 1, 0)
                end
                if userInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    direction = direction - Vector3.new(0, 1, 0)
                end

                bodyVelocity.Velocity = direction * 50
            end)
        else
            DayYield:Notify("Fly", "Flying has been deactivated!", 3)
            humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
        end
    end
})

-- Infinite Jump Logic
GeneralTab:CreateToggle({
    Name = "Infinite Jump",
    Callback = function(state)
        infiniteJump = state
        DayYield:Notify("Infinite Jump", state and "Enabled" or "Disabled", 3)
        if infiniteJump then
            userInputService.JumpRequest:Connect(function()
                if infiniteJump then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        end
    end
})

-- Aimbot Logic
local function findClosestPlayer()
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            -- Team check
            if player.Team ~= game.Players.LocalPlayer.Team then
                local distance = (player.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

userInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Q then
        aimbotEnabled = true
        DayYield:Notify("Aimbot", "Aimbot activated! Hold Q to aim.", 3)

        while aimbotEnabled and userInputService:IsKeyDown(Enum.KeyCode.Q) do
            local target = findClosestPlayer()
            if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                camera.CFrame = CFrame.new(camera.CFrame.Position, target.Character.HumanoidRootPart.Position)
            end
            runService.RenderStepped:Wait()
        end

        aimbotEnabled = false
        DayYield:Notify("Aimbot", "Aimbot deactivated.", 3)
    end
end)

-- ESP Features
local espEnabled = false
local espObjects = {}

local function createESP(player)
    local character = player.Character
    if not character then return end

    -- Box ESP
    local box = Instance.new("BoxHandleAdornment")
    box.Size = character:GetExtentsSize()
    box.Adornee = character
    box.AlwaysOnTop = true
    box.ZIndex = 10
    box.Transparency = 0.5
    box.Color3 = Color3.new(1, 0, 0)
    box.Parent = character

    -- Name ESP
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Text = player.Name
    nameLabel.Size = UDim2.new(0, 100, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 0, -20)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.Parent = box

    -- Health ESP
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Text = "Health: " .. player.Character.Humanoid.Health
    healthLabel.Size = UDim2.new(0, 100, 0, 20)
    healthLabel.Position = UDim2.new(0, 0, 0, -40)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.new(1, 1, 1)
    healthLabel.Parent = box

    -- Distance ESP
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Text = "Distance: " .. math.floor((player.Character.HumanoidRootPart.Position - rootPart.Position).Magnitude)
    distanceLabel.Size = UDim2.new(0, 100, 0, 20)
    distanceLabel.Position = UDim2.new(0, 0, 0, -60)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.new(1, 1, 1)
    distanceLabel.Parent = box

    -- Skeleton ESP
    local function drawLine(part1, part2)
        local line = Instance.new("LineHandleAdornment")
        line.Length = (part1.Position - part2.Position).Magnitude
        line.Thickness = 2
        line.Color3 = Color3.new(1, 0, 0)
        line.Adornee = part1
        line.CFrame = CFrame.new(part1.Position, part2.Position)
        line.Parent = part1
    end

    local parts = {
        character:FindFirstChild("Head"),
        character:FindFirstChild("Torso"),
        character:FindFirstChild("Left Arm"),
        character:FindFirstChild("Right Arm"),
        character:FindFirstChild("Left Leg"),
        character:FindFirstChild("Right Leg")
    }

    for i = 1, #parts do
        for j = i + 1, #parts do
            if parts[i] and parts[j] then
                drawLine(parts[i], parts[j])
            end
        end
    end

    espObjects[player] = box
end

local function removeESP(player)
    if espObjects[player] then
        espObjects[player]:Destroy()
        espObjects[player] = nil
    end
end

ESPTab:CreateToggle({
    Name = "ESP",
    Callback = function(state)
        espEnabled = state
        DayYield:Notify("ESP", state and "Enabled" or "Disabled", 3)

        if espEnabled then
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer then
                    createESP(player)
                end
            end

            game.Players.PlayerAdded:Connect(function(player)
                if espEnabled then
                    createESP(player)
                end
            end)

            game.Players.PlayerRemoving:Connect(function(player)
                removeESP(player)
            end)
        else
            for player, espObject in pairs(espObjects) do
                espObject:Destroy()
                espObjects[player] = nil
            end
        end
    end
})
